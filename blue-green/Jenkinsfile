/*
    藍綠部署示範樣版
 */
def name = "app"
def namespace = "blue-green"
def imageName = "localhost:32000/app"
def imageTag = "1.4.2" // image's tag
def podReplicaCount = "1"
def serviceType = "ClusterIP" // None, NodePort, ClusterIP, LoadBalancer
def port = "3000"
def nodePort = "" // if serviceType is NodePort
def targetPort = "3000"
def gatewayName = "systex-gw"
def timeoutSeconds = 150
def switchToGreen = false
def blueEqualsGreen = false

podTemplate(cloud: 'kubernetes', containers: [
    containerTemplate(
        name: 'kubectl',
        image: 'localhost:32000/kubectl:1.1',
        ttyEnabled: true,
        privileged: false,
        alwaysPullImage: false,
        workingDir: '/home/jenkins/agent',
        resourceRequestCpu: '50m',
        resourceLimitCpu: '100m',
        resourceRequestMemory: '100Mi',
        resourceLimitMemory: '200Mi',
        command: 'cat'
    )
],
volumes: [
    configMapVolume(mountPath: '/home/jenkins/agent/.kube', configMapName: 'jenkins-cluster-master')
]
) {
  node(POD_LABEL)  {
    stage('啟動中') {
      container('kubectl') {
        checkout scm
        
        stage('Deploy Green'){
          sh """
          helm template \
              --set project.name=${name} \
              --set project.namespace=${namespace} \
              --set project.pod.image.name=${imageName} \
              --set project.pod.image.tag=${imageTag} \
              --set project.pod.replicas=${podReplicaCount} \
              --set project.service.type=${serviceType} \
              --set project.service.port=${port} \
              --set project.service.targetPort=${targetPort} \
              --set project.service.nodePort=${nodePort} \
              --set project.gateway.name=${gatewayName} \
              blue-green/deploy-green/
          helm template \
              --set project.name=${name} \
              --set project.namespace=${namespace} \
              --set project.pod.image.name=${imageName} \
              --set project.pod.image.tag=${imageTag} \
              --set project.pod.replicas=${podReplicaCount} \
              --set project.service.type=${serviceType} \
              --set project.service.port=${port} \
              --set project.service.targetPort=${targetPort} \
              --set project.service.nodePort=${nodePort} \
              --set project.gateway.name=${gatewayName} \
              blue-green/deploy-green/ \
          | kubectl apply -f -
          """
            try{  
              sh """
              helm template \
                  --set project.name=${name} \
                  --set project.namespace=${namespace} \
                  --set project.pod.image.name=${imageName} \
                  --set project.pod.image.tag=${imageTag} \
                  --set project.pod.replicas=${podReplicaCount} \
                  --set project.service.type=${serviceType} \
                  --set project.service.port=${port} \
                  --set project.service.targetPort=${targetPort} \
                  --set project.service.nodePort=${nodePort} \
                  --set project.gateway.name=${gatewayName} \
                  --set project.version.blue=\$(kubectl get DestinationRule app -n=${namespace} -o jsonpath='{.spec.subsets[?(@.name=="blue")].labels.version}') \
                  --set project.version.green=${imageTag} \
                  blue-green/apply-green-network/ \
              | kubectl apply -n ${namespace} -f -
              """
            }catch(err){
              sh """
              // first time deploy
              echo "blue equals green"
              helm template \
                  --set project.name=${name} \
                  --set project.namespace=${namespace} \
                  --set project.pod.image.name=${imageName} \
                  --set project.pod.image.tag=${imageTag} \
                  --set project.pod.replicas=${podReplicaCount} \
                  --set project.service.type=${serviceType} \
                  --set project.service.port=${port} \
                  --set project.service.targetPort=${targetPort} \
                  --set project.service.nodePort=${nodePort} \
                  --set project.gateway.name=${gatewayName} \
                  --set project.version.blue=${imageTag}  \
                  --set project.version.green=${imageTag} \
                  blue-green/apply-green-network/ \
              | kubectl apply  -n ${namespace} -f -
              """
              blueEqualsGreen = true
            }
        }
        stage('Check Green Ready'){
          sh "sleep 3"
        }
        stage('Switch Version'){
          if (blueEqualsGreen ==true) {  
              switchToGreen = true
          }else{
              try {
                timeout(time: timeoutSeconds, unit: 'SECONDS') {
                  input "確定將(${name})切換至版本(${imageTag})？"
                  // Approved
                  switchToGreen = true
                  sh """
                    helm template \
                        --set project.name=${name} \
                        --set project.namespace=${namespace} \
                        --set project.pod.image.name=${imageName} \
                        --set project.pod.image.tag=${imageTag} \
                        --set project.pod.replicas=${podReplicaCount} \
                        --set project.service.type=${serviceType} \
                        --set project.service.port=${port} \
                        --set project.service.targetPort=${targetPort} \
                        --set project.service.nodePort=${nodePort} \
                        --set project.gateway.name=${gatewayName} \
                        --set project.version.blue=\$(kubectl get DestinationRule app -n=${namespace} -o jsonpath='{.spec.subsets[?(@.name=="blue")].labels.version}') \
                        --set project.version.green=${imageTag} \
                        blue-green/switch-blue-2-green/ \
                     | kubectl apply -f -
                  """
                }
              } catch (err) {
                // timeout or abort
                echo "Aborted by " + err.getCauses()[0].getUser()
              }
          }
        }
        
        if( switchToGreen==false ){
          stage('Undeploy Green'){
            sh """
              kubectl delete deployment ${name}-${imageTag}-deploy -n ${namespace}
            """
          }
        }
        
        if( switchToGreen==true ){
          stage('Close Blue'){
            sh """
              kubectl delete deployment ${name}-\$(kubectl get DestinationRule app -n=${namespace} -o jsonpath='{.spec.subsets[?(@.name=="blue")].labels.version}')-deploy -n ${namespace}
              echo "Update network"
              helm template \
                  --set project.name=${name} \
                  --set project.namespace=${namespace} \
                  --set project.pod.image.name=${imageName} \
                  --set project.pod.image.tag=${imageTag} \
                  --set project.pod.replicas=${podReplicaCount} \
                  --set project.service.type=${serviceType} \
                  --set project.service.port=${port} \
                  --set project.service.targetPort=${targetPort} \
                  --set project.service.nodePort=${nodePort} \
                  --set project.gateway.name=${gatewayName} \
                  --set project.version.blue=${imageTag}  \
                  --set project.version.green=${imageTag} \
                  blue-green/apply-green-network/ \
              | kubectl apply  -n ${namespace} -f -
            """
          }
        }
        
      }
    }
  }
}
